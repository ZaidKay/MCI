/* This example code Measures the distance using HC-SR04 Ultrasonic range sensor*/
/* It displays the measured distance value on computer using UART communication module of TM4C123 */
/* Timer0A is used to measure distance by measuring pulse duration of Echo output signal */
/* Timer1A is used to make precise microsecond delay function */

/*header files for TM4C123 device and sprintf library */
#include "TM4C123GH6PM.h"
#include <stdio.h>

/*Function prototype for Timer0A and UART module initialization */
uint32_t Measure_distance(void);
void Timer0ACapture_init(void);
void Delay_MicroSecond(int time);
void UART5_init(void);
void UART5_Transmitter(unsigned char data);
void printstring(char *str);
void Delay(unsigned long counter);

/* global variables to store and display distance in cm */
uint32_t time; /*stores pulse on time */
uint32_t distance; /* stores measured distance value */
char mesg[20];  /* string format of distance value */

/* main code to take distance measurement and send data to UART terminal */
int main(void)
{
    Timer0ACapture_init();  /*initialize Timer0A in edge time capture mode */
    UART5_init(); /* initialize UART5 module to transmit data to computer */
    
    while(1)
    {
        time = Measure_distance(); /* take pulse duration measurement */ 
        distance = (time * 10625) / 10000000; /* convert pulse duration into distance in cm */
        sprintf(mesg, "\r\nDistance = %d cm", distance); /* convert distance into string */
        printstring(mesg); /* transmit data to computer */
        Delay(2000); /* 2 second delay between measurements */
    }
}

/* This function captures consecutive rising and falling edges of a periodic signal */
/* from Timer Block 0 Timer A and returns the time difference (the period of the signal). */
uint32_t Measure_distance(void)
{
    int lastEdge, thisEdge;
 
    /* Trigger pulse */
    GPIOA->DATA &= ~(1<<4); /* make trigger pin low */
    Delay_MicroSecond(2); /* 2 microseconds delay */
    GPIOA->DATA |= (1<<4); /* make trigger pin high */
    Delay_MicroSecond(10); /* 10 microseconds delay */
    GPIOA->DATA &= ~(1<<4); /* make trigger pin low */

    while(1)
    {
        TIMER0->ICR = 4; /* clear timer0A capture flag */
        while((TIMER0->RIS & 4) == 0); /* wait till captured */
        if(GPIOB->DATA & (1<<6)) /* check if rising edge occurs */
        {
            lastEdge = TIMER0->TAR; /* save the timestamp */
            TIMER0->ICR = 4; /* clear timer0A capture flag */
            while((TIMER0->RIS & 4) == 0); /* wait till captured */
            thisEdge = TIMER0->TAR; /* save the timestamp */
            return (thisEdge - lastEdge); /* return the time difference */
        }
    }
}

/* Timer0A initialization function */
void Timer0ACapture_init(void)
{
    SYSCTL->RCGCTIMER |= 1; /* enable clock to Timer Block 0 */
    SYSCTL->RCGCGPIO |= 0x02; /* enable clock to PORTB */
    
    GPIOB->DIR &= ~(1<<6); /* make PB6 an input pin */
    GPIOB->DEN |= (1<<6); /* enable digital functionality on PB6 */
    GPIOB->AFSEL |= (1<<6); /* enable alternate function on PB6 */
    GPIOB->PCTL &= ~0x0F000000; /* clear bits to configure PB6 */
    GPIOB->PCTL |= 0x07000000; /* configure PB6 for T0CCP0 */
    
    /* PA4 as digital output for trigger */
    SYSCTL->RCGCGPIO |= 0x01; /* enable clock to PORTA */
    GPIOA->DIR |= (1<<4); /* set PA4 as a digital output pin */
    GPIOA->DEN |= (1<<4); /* enable digital functionality on PA4 */

    TIMER0->CTL &= ~1; /* disable timer0A during setup */
    TIMER0->CFG = 4; /* 16-bit timer mode */
    TIMER0->TAMR = 0x17; /* up-count, edge-time, capture mode */
    TIMER0->CTL |= 0x0C; /* capture both edges */
    TIMER0->CTL |= 1; /* enable timer0A */
}

/* Create one microsecond delay using Timer block 1 */
void Delay_MicroSecond(int time)
{
    int i;
    SYSCTL->RCGCTIMER |= 2; /* enable clock to Timer Block 1 */
    TIMER1->CTL = 0; /* disable Timer before initialization */
    TIMER1->CFG = 0x04; /* 16-bit option */ 
    TIMER1->TAMR = 0x02; /* periodic mode and down-counter */
    TIMER1->TAILR = 16 - 1; /* TimerA interval load value reg */
    TIMER1->ICR = 0x1; /* clear the TimerA timeout flag */
    TIMER1->CTL |= 0x01; /* enable Timer A */
    
    for(i = 0; i < time; i++)
    {
        while ((TIMER1->RIS & 0x1) == 0); /* wait for TimerA timeout flag */
        TIMER1->ICR = 0x1; /* clear the TimerA timeout flag */
    }
}

void UART5_init(void)
{
    SYSCTL->RCGCUART |= 0x20; /* enable clock to UART5 */
    SYSCTL->RCGCGPIO |= 0x10; /* enable clock to PORTE for PE4/Rx and RE5/Tx */
    UART5->CTL = 0; /* disable UART5 */
    UART5->IBRD = 104; /* for 9600 baud rate, integer = 104 */
    UART5->FBRD = 11; /* for 9600 baud rate, fractional = 11*/
    UART5->CC = 0; /* select system clock */
    UART5->LCRH = 0x60; /* data length 8-bit, no parity bit, no FIFO */
    UART5->CTL = 0x301; /* Enable UART5, Rx and Tx */
    
    GPIOE->DEN = 0x30; /* set PE4 and PE5 as digital */
    GPIOE->AFSEL = 0x30; /* enable alternate function on PE4, PE5 */
    GPIOE->PCTL = 0x00110000; /* configure PE4, PE5 for UART */
}

void UART5_Transmitter(unsigned char data)  
{
    while((UART5->FR & (1<<5)) != 0); /* wait until Tx buffer not full */
    UART5->DR = data; /* transmit byte */
}

void printstring(char *str)
{
    while(*str)
    {
        UART5_Transmitter(*(str++));
    }
}

void Delay(unsigned long counter)
{
    unsigned long i = 0;
    for(i=0; i< counter*1000; i++);
}
